#!/usr/bin/env python
#
# Usage: vwine-setup PROFILE
#
# Setup a fresh virtual-wine and install Python into.
# Installation is done by $WINREPO"/PROFILE/install.bat
#

WINREPO = '~/devel/windows-repos'

import os
import sys
import argparse
import subprocess

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--clean', action='store_true')
parser.add_argument('-f', '--force', action='store_true')
parser.add_argument('--repository', default=WINREPO,
                    help='Where predefined windows setup profiles resite '
                         'and where the vwine instance will be created.')
parser.add_argument('profile')
args = parser.parse_args() 

WINREPO = os.path.expanduser(args.repository)

# get the name of the environment from the install.bat file
installscript = os.path.join(WINREPO, args.profile, 'install.bat')
if not os.path.exists(installscript):
    raise SystemExit("Installscript %r not found" % installscript)
try:
    envname = open(installscript, 'rU').read().split()
    envname = envname[envname.index('ENVNAME')+1]
except (IndexError, ValueError):
    raise SystemExit("Installscript %r is missing ENVNAME setting"
                     % installscript)
except IOError, e:
    raise SystemExit(e)

# wineprefix is the place where the new virtal-wine setup is created
wineprefix = os.path.join(WINREPO, envname)

# created the virtal-wine environment
cmd = ['vwine-setup']
if args.clean: cmd.append('--clean')
if args.force: cmd.append('--force')
cmd.append(wineprefix)
rc = subprocess.call(cmd)
if rc:
    raise SystemExit(rc)

# install the softwae into the virtal-wine environment
installscript = subprocess.check_output(
    ['winepath', '-w', installscript]).strip()
rc = subprocess.call(['wineconsole', installscript])
if rc:
    raise SystemExit(rc)
